// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String?
  phoneNumber  String?   @unique
  email        String?   @unique
  googleId     String?   @unique
  picture      String?
  authProvider String? // 'google' or 'phone'
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastActive   DateTime  @default(now())
  messages     Message[]
  chats        Chat[]
}

model Chat {
  id           String    @id @default(cuid())
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId      String // 'therapist', 'dietician', 'career', 'priya'
  title        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messageCount Int       @default(0)
  lastMessage  String?
  messages     Message[]
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  agentId   String
  content   String
  role      String // 'user' or 'assistant'
  timestamp DateTime @default(now())
  metadata  Json? // For storing additional message data like confidence, read status, etc.
}
